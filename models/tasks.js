//Tasks.JS stores each of the methods that will manipulate the tasks, 
//from their creation, modification, listing, deletion, and reading of
//the JSON generated by the app.


// We import the 'Task' class from the 'task' module.
const Task = require('./task');

// We define a constant 'dots' for visual formatting in console output.
const dots = ':::';

// We define a 'Tasks' class to represent a collection of tasks.
class Tasks {
    // We initialize an empty object '_list' to store the tasks.
    _list = {};    
    
    // We define a getter 'listArr' to convert '_list' into an array of tasks.
    get listArr(){
        const list = [];
        Object.keys(this._list).forEach(key =>{
            const task = this._list[key];
            list.push(task);
        });
        return list;
    }

    // The constructor of the 'Tasks' class initializes '_list' as an empty object.
    constructor(){
        this._list ={};
    }

    // The 'loadTasksArray' method loads an array of tasks into '_list'.
    loadTasksArray(tasks = []){
        tasks.forEach(task =>{
            this._list[task.id] = task;
        });
    }

    // The 'createTask' method creates a new task and adds it to '_list'.
    createTask(desc = ''){
        const task = new Task(desc);
        this._list[task.id] = task;
    }

    // The 'listTasks' method prints all tasks to the console.
    listTasks(){
        const list = this.listArr;
        
        for (let i = 1; i <= list.length; i++) {
            let desc = list[i-1].description;
            let date = list[i-1].completeDate;
            let status = '';
            if (!list[i-1].completeDate) {
                status = 'Pending';
            }else{
                status = 'Complete';
            }
            if (date!=null) {
                console.log(`\n   ${i}.`.yellow, `${desc}`.white, `${dots}`.yellow,`${status}`, ` ${dots}`.yellow, `${date}`.green);
            }else{
                console.log(`\n   ${i}.`.yellow, `${desc}`.white, `${dots}`.yellow,`${status}`.red);
            }
            
        }
    }

    // The 'listCompletedTasks' method prints all completed tasks to the console.
    listCompletedTasks(){
        let i =1;
        const status = 'Complete';
        this.listArr.forEach((task) => {
            const {description, completeDate} = task;
            if (completeDate) {
                console.log(`\n   ${i}.`.yellow, `${description}`.white, `${dots}`.yellow,`${status}`.green, ` ${dots}`.yellow, `${completeDate}`.green);
                i++;
            }
        });
    }
    
    // The 'listPendingTasks' method prints all pending tasks to the console.
    listPendingTasks(){
        let i =1;
        const status = 'Pending';
        this.listArr.forEach((task) => {
            const {description, completeDate} = task;
            if (!completeDate) {
                console.log(`\n   ${i}.`.yellow, `${description}`.white, `${dots}`.yellow,`${status}`.red);
                i++;
            }
        });
    }

    // The 'taskStatus' method toggles the completion status of a task.
    taskStatus(id){
        id.forEach((id)=>{
            if(this._list[id]){
                
                if (this._list[id].completeDate) {
                    this._list[id].completeDate = null;
                }
                else{
                    const date =  new Date();
                    this._list[id].completeDate = date.toISOString().slice(0,10);
                }
            }
        })
    }

    // The 'deleteTask' method deletes a task from '_list'.
    deleteTask(ids){
        ids.forEach((id)=>{
            if (this._list[id]) {
                delete this._list[id]
            }
        })
    }
}

// We export the 'Tasks' class so it can be used in other modules.
module.exports = Tasks;
